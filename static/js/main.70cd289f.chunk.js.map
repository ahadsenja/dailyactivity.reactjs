{"version":3,"sources":["app/TodoApp/TodoForm.js","app/TodoApp/TodoList.js","app/TodoApp/Todo.js","App.js","serviceWorker.js","index.js"],"names":["TodoForm","_this$props$dataState","this","props","dataState","time","activity","react_default","a","createElement","align","className","ref","type","name","placeholder","value","onChange","handleChange","onClick","addTodo","mode","React","Component","TodoList","_this","todos","style","height","width","map","todo","i","key","selectTodo","bind","deleteTodo","Todo","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","event","setState","defineProperty","target","preventDefault","state","push","resetForm","splice","TodoApp_TodoForm","TodoApp_TodoList","App","TodoApp_Todo","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.70cd289f.chunk.js","sourcesContent":["import React from 'react'\n\nimport './todo.css'\n\n\nclass TodoForm extends React.Component {\n\n    render() {\n        const { time, activity } = this.props.dataState\n\n        return (\n            <div>\n                <div align='center'>\n                    <br/>\n                    <h3><b>Daily activity app</b></h3>\n                </div>\n                <div className='row'>\n                    <div className='col-sm-8 offset-2'>\n                        <form ref='formulir' className='form-inline'>\n                            <div className='form-group mb-2'>\n                                <label className='sr-only'>Time</label>\n                                <input type='text' name='time' className='form-control' placeholder='Time' value={time} onChange={this.props.handleChange} />\n                            </div>\n            \n                            <div className='form-group mx-sm-3 mb-2'>\n                                <label className='sr-only'>Activity</label>\n                                <input type='text' name='activity' className='form-control' placeholder='Your activity' value={activity} onChange={this.props.handleChange} />\n                            </div>\n            \n                            <button className='btn btn-outline-secondary mb-2'>Cancel</button>\n\n                            <span className='btn-todo-form-action'></span>\n\n                            <button className='btn btn-primary mb-2' type='submit' onClick={ this.props.addTodo} mode='add'>Save</button>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default TodoForm","import React from 'react'\n\nimport './todo.css'\n\n\nclass TodoList extends React.Component {\n\n    render() {\n        const { todos } = this.props.dataState\n\n        return (\n            <div>\n                <div className='row'>\n                    <div className='col-sm-8 offset-2'>\n                        <table className='table table-hover'>\n                            <thead>\n                                <tr style={{height: 40}}>\n                                    <th style={{width: 140}}>Time</th>\n                                    <th style={{width: 500}}>Activity</th>\n                                    <th style={{width: 180}}>Action</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                {\n                                    todos.map((todo, i) =>\n                                        <tr key={i}>\n                                            <td>{todo.time}</td>\n                                            <td>{todo.activity}</td>\n                                            <td>\n                                                <button className='btn btn-warning' onClick={this.props.selectTodo.bind(this, todo)}>Edit</button>\n\n                                                <span className='btn-todo-list-action'></span>\n\n                                                <button className='btn btn-danger' onClick={this.props.deleteTodo.bind(this, i)}>Delete</button>\n                                            </td>                                            \n                                        </tr>\n                                    )\n                                }\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default TodoList","import React from 'react'\n\nimport TodoForm from './TodoForm'\nimport TodoList from './TodoList'\n\n\nclass Todo extends React.Component {\n    \n    constructor(props) {\n        super(props)\n        this.state = {\n            time: '',\n            activity: '',\n            todos: [],\n            mode: 'add'\n        }\n    }\n\n    handleChange = (event) => {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    addTodo = (event) => {\n        event.preventDefault()\n        const { todos } = this.state\n        const todo = {\n            time: this.state.time,\n            activity: this.state.activity\n        }\n        todos.push(todo)\n        this.setState({ todos })\n\n        this.resetForm()\n    }\n\n    deleteTodo = (i) => {\n        const { todos } = this.state\n        todos.splice(i, 1)\n        this.setState({\n            todos\n        })\n    }\n\n    resetForm = () => {\n        this.setState({\n            time: '',\n            activity: ''\n        })\n    }\n\n    selectTodo = (todo) => {\n        this.setState({\n            time: todo.time,\n            activity: todo.activity,\n            mode: 'udpate'\n        })\n    }\n\n    render() {\n        return (\n            <div className='container'>\n                <TodoForm \n                    dataState={this.state}\n                    addTodo={this.addTodo}\n                    handleChange={this.handleChange}\n                />\n                <TodoList \n                    dataState={this.state}\n                    deleteTodo={this.deleteTodo}\n                    selectTodo={this.selectTodo}\n                />\n            </div>\n        )\n    }\n}\n\nexport default Todo","import React, { Component } from 'react';\nimport './App.css';\n\nimport Todo from './app/TodoApp/Todo'\n\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div>\n        <Todo />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}